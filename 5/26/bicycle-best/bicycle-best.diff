@@ -17,20 +17,19 @@
     properties = {
       u_turn_penalty                = 20,
       traffic_light_penalty         = 2,
-      --weight_name                   = 'cyclability',
-      weight_name                   = 'duration',
+      weight_name                   = 'cyclability',
       process_call_tagless_node     = false,
-      max_speed_for_map_matching    = 110/3.6, -- kmph -> m/s
+      max_speed_for_map_matching    = 70/3.6, -- kmph -> m/s
       use_turn_restrictions         = false,
       continue_straight_at_waypoint = false,
-      mode_change_penalty           = 30,
+      mode_change_penalty           = 20,
     },
 
     default_mode              = mode.cycling,
     default_speed             = default_speed,
     walking_speed             = walking_speed,
     oneway_handling           = true,
-    turn_penalty              = 6,
+    turn_penalty              = 5,
     turn_bias                 = 1.4,
     use_public_transport      = true,
 
@@ -48,7 +47,8 @@
     access_tag_whitelist = Set {
       'yes',
       'permissive',
-      'designated'
+      'designated',
+	  'tolerated'
     },
 
     access_tag_blacklist = Set {
@@ -65,17 +65,21 @@
       'use_sidepath'
     },
 
-    restricted_access_tag_list = Set { },
+    restricted_access_tag_list = Set {
+      'destination'
+	},
 
     restricted_highway_whitelist = Set { },
 
     -- tags disallow access to in combination with highway=service
-    service_access_tag_blacklist = Set { },
+    service_access_tag_blacklist = Set {
+	  'drive-through'
+	},
 
     construction_whitelist = Set {
       'no',
       'widening',
-      'minor',
+      'minor'
     },
 
     access_tags_hierarchy = Sequence {
@@ -94,7 +98,8 @@
       'share_busway',
       'sharrow',
       'shared',
-      'shared_lane'
+      'shared_lane',
+	  'shoulder'
     },
 
     opposite_cycleway_tags = Set {
@@ -103,19 +108,16 @@
       'opposite_track',
     },
 
-    -- reduce the driving speed by 30% for unsafe roads
-    -- only used for cyclability metric
-    unsafe_highway_list = {
-      primary = 0.5,
-      secondary = 0.65,
-      tertiary = 0.8,
-      primary_link = 0.5,
-      secondary_link = 0.65,
-      tertiary_link = 0.8,
-    },
-
-    service_penalties = {
-      alley             = 0.5,
+    -- penalize high traffic roads
+    highways_list = {
+	  trunk = 1,
+      primary = 1.4,
+      secondary = 1.7,
+      tertiary = 1.9,
+	  trunk_link = 1.1,
+      primary_link = 1.5,
+      secondary_link = 1.75,
+      tertiary_link = 1.95
     },
 
     bicycle_speeds = {
@@ -131,13 +133,13 @@
       living_street = default_speed,
       road = default_speed,
       service = default_speed,
+	  footway = 12,
+      pedestrian = 14,
       track = 12,
-      path = 12
+      path = 13
     },
 
     pedestrian_speeds = {
-      footway = walking_speed,
-      pedestrian = walking_speed,
       steps = 2
     },
 
@@ -173,21 +175,25 @@
 
     surface_speeds = {
       asphalt = default_speed,
+      chipseal = default_speed,
+      concrete = default_speed,
+      concrete_lanes = default_speed,
+      wood = 10,
       ["cobblestone:flattened"] = 10,
       paving_stones = 10,
       compacted = 10,
-      cobblestone = 6,
+      cobblestone = 7,
       unpaved = 6,
-      fine_gravel = 6,
+      fine_gravel = 10,
       gravel = 6,
       pebblestone = 6,
-      ground = 6,
-      dirt = 6,
+      ground = 10,
+      dirt = 8,
       earth = 6,
       grass = 6,
       mud = 3,
       sand = 3,
-      sett = 10
+      sett = 9
     },
 
     classes = Sequence {
@@ -201,9 +207,16 @@
     },
 
     tracktype_speeds = {
+	  grade3 = 9,
+	  grade2 = 8,
+	  grade1 = 6
     },
 
     smoothness_speeds = {
+	  bad = 8,
+	  very_bad = 6,
+	  horrible = 4,
+	  very_horrible = 3
     },
 
     avoid = Set {
@@ -269,13 +282,13 @@
 
   -- other tags
   data.junction = way:get_value_by_key("junction")
-  data.maxspeed = Measure.get_max_speed(way:get_value_by_key ("maxspeed")) or 0
-  data.maxspeed_forward = Measure.get_max_speed(way:get_value_by_key("maxspeed:forward")) or 0
-  data.maxspeed_backward = Measure.get_max_speed(way:get_value_by_key("maxspeed:backward")) or 0
+  data.maxspeed = Measure.get_max_speed(way:get_value_by_key ("maxspeed:bicycle")) or 0
+  data.maxspeed_forward = Measure.get_max_speed(way:get_value_by_key("maxspeed:bicycle:forward")) or 0
+  data.maxspeed_backward = Measure.get_max_speed(way:get_value_by_key("maxspeed:bicycle:backward")) or 0
   data.barrier = way:get_value_by_key("barrier")
   data.oneway = way:get_value_by_key("oneway")
   data.oneway_bicycle = way:get_value_by_key("oneway:bicycle")
-  data.cycleway = way:get_value_by_key("cycleway")
+  data.cycleway = way:get_value_by_key("cycleway") or way:get_value_by_key("cycleway:both")
   data.cycleway_left = way:get_value_by_key("cycleway:left")
   data.cycleway_right = way:get_value_by_key("cycleway:right")
   data.duration = way:get_value_by_key("duration")
@@ -504,32 +517,31 @@
 function safety_handler(profile,way,result,data)
   -- convert duration into cyclability
   if profile.properties.weight_name == 'cyclability' then
-    local safety_penalty = profile.unsafe_highway_list[data.highway] or 1.
-    local is_unsafe = safety_penalty < 1
+    local safety_penalty = profile.highways_list[data.highway] or 2.
+	local car_maxspeed = Measure.get_max_speed(way:get_value_by_key("maxspeed")) or 0
 
-    -- primaries that are one ways are probably huge primaries where the lanes need to be separated
-    if is_unsafe and data.highway == 'primary' and not data.is_twoway then
-      safety_penalty = safety_penalty * 0.5
-    end
-    if is_unsafe and data.highway == 'secondary' and not data.is_twoway then
-      safety_penalty = safety_penalty * 0.6
-    end
-
-    local forward_is_unsafe = is_unsafe and not data.has_cycleway_forward
-    local backward_is_unsafe = is_unsafe and not data.has_cycleway_backward
-    local is_undesireable = data.highway == "service" and profile.service_penalties[data.service]
-    local forward_penalty = 1.
-    local backward_penalty = 1.
+	-- roads where cars drive fast (high maxspeed) are penalized
+	-- Only penalize when higher than 30km/h
+	if car_maxspeed > 30 then
+	    -- Penalize for -0.1 if maxspeed 40, to -1.1 if maxspeed 110
+		car_maxspeed_penalty = (car_maxspeed - 30) / 100
+		safety_penalty = safety_penalty - car_maxspeed_penalty
+	end
+	
+	-- promote bicycle roads tagged as highway=residential or others
+	if way:get_value_by_key("bicycle_street") == 'yes' then
+		safety_bonus = safety_bonus + 0.2
+	end
+
+    local forward_is_unsafe = not data.has_cycleway_forward
+    local backward_is_unsafe = not data.has_cycleway_backward
+    local forward_penalty = 2.
+    local backward_penalty = 2.
     if forward_is_unsafe then
-      forward_penalty = math.min(forward_penalty, safety_penalty)
+      forward_penalty = safety_penalty - 0.2
     end
     if backward_is_unsafe then
-       backward_penalty = math.min(backward_penalty, safety_penalty)
-    end
-
-    if is_undesireable then
-       forward_penalty = math.min(forward_penalty, profile.service_penalties[data.service])
-       backward_penalty = math.min(backward_penalty, profile.service_penalties[data.service])
+       backward_penalty = safety_penalty - 0.2
     end
 
     if result.forward_speed > 0 then
